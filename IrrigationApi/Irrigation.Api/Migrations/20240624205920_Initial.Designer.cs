// <auto-generated />
using System;
using Irrigation.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Irrigation.Api.Migrations
{
    [DbContext(typeof(IrrigationDataContext))]
    [Migration("20240624205920_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Irrigation.Core.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("area_size");

                    b.HasKey("Id");

                    b.ToTable("tbl_area", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<int?>("sensor_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("sensor_id");

                    b.ToTable("tbl_notification", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tbl_role", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("tbl_schedule", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int?>("area_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("area_id");

                    b.ToTable("tbl_sensor", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("BIT")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("email")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.ToTable("tbl_user", (string)null);
                });

            modelBuilder.Entity("Irrigation.Core.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("weather_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Humidity")
                        .HasColumnType("int")
                        .HasColumnName("humidity");

                    b.Property<int>("Temperature")
                        .HasColumnType("int")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<int?>("sensor_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("sensor_id");

                    b.ToTable("tbl_weather", (string)null);
                });

            modelBuilder.Entity("tbl_user_role", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("role_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("tbl_user_role");
                });

            modelBuilder.Entity("Irrigation.Core.Models.Notification", b =>
                {
                    b.HasOne("Irrigation.Core.Models.Sensor", "Sensor")
                        .WithMany("Notifications")
                        .HasForeignKey("sensor_id")
                        .HasConstraintName("FK_Notification_Sensor");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Irrigation.Core.Models.Sensor", b =>
                {
                    b.HasOne("Irrigation.Core.Models.Area", "Area")
                        .WithMany("Sensors")
                        .HasForeignKey("area_id")
                        .HasConstraintName("FK_Area_Sensor");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Irrigation.Core.Models.Weather", b =>
                {
                    b.HasOne("Irrigation.Core.Models.Sensor", "Sensor")
                        .WithMany("Weathers")
                        .HasForeignKey("sensor_id")
                        .HasConstraintName("FK_Weather_Sensor");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("tbl_user_role", b =>
                {
                    b.HasOne("Irrigation.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_RoleId");

                    b.HasOne("Irrigation.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_UserId");
                });

            modelBuilder.Entity("Irrigation.Core.Models.Area", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Irrigation.Core.Models.Sensor", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Weathers");
                });
#pragma warning restore 612, 618
        }
    }
}
